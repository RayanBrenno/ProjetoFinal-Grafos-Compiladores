
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import Classes.Digrafo;
import Classes.Grafo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\002\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\002\000\002" +
    "\005\005\000\002\005\005\000\002\005\007\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\002" +
    "\000\002\006\004\000\002\006\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\004\005\001\002\000\004\002\051\001" +
    "\002\000\004\005\006\001\002\000\010\002\ufffd\010\011" +
    "\011\007\001\002\000\014\002\uffef\003\uffef\012\uffef\013" +
    "\uffef\014\uffef\001\002\000\004\002\000\001\002\000\014" +
    "\002\ufff6\003\ufff6\012\ufff6\013\ufff6\014\ufff6\001\002\000" +
    "\014\002\uffec\003\014\012\013\013\017\014\016\001\002" +
    "\000\004\017\032\001\002\000\004\002\uffed\001\002\000" +
    "\004\002\uffff\001\002\000\006\015\022\016\023\001\002" +
    "\000\006\015\020\016\021\001\002\000\014\002\ufffc\003" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\001\002\000\014\002\ufffb" +
    "\003\ufffb\012\ufffb\013\ufffb\014\ufffb\001\002\000\004\007" +
    "\027\001\002\000\004\007\024\001\002\000\006\015\025" +
    "\016\026\001\002\000\014\002\ufff9\003\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\001\002\000\014\002\ufff7\003\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\001\002\000\006\015\030\016\031\001" +
    "\002\000\014\002\ufffa\003\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\001\002\000\014\002\ufff8\003\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\001\002\000\004\002\uffee\001\002\000\014\002\uffec" +
    "\003\014\012\013\013\036\014\035\001\002\000\004\002" +
    "\ufffe\001\002\000\006\015\041\016\042\001\002\000\006" +
    "\015\037\016\040\001\002\000\014\002\ufff5\003\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\014\002\ufff4\003\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\001\002\000\004\006\046\001" +
    "\002\000\004\006\043\001\002\000\006\015\044\016\045" +
    "\001\002\000\014\002\ufff2\003\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\001\002\000\014\002\ufff0\003\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\001\002\000\006\015\047\016\050\001\002\000" +
    "\014\002\ufff3\003\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002" +
    "\000\014\002\ufff1\003\ufff1\012\ufff1\013\ufff1\014\ufff1\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public Map<String, Set<String>> grafo = new HashMap<>();
    public Map<String, Set<String>> digrafo = new HashMap<>();
    String type;
    public boolean deveImprimir = false;

    public void syntax_error(Symbol s){     
        this.defineError(s.left, s.right);    
    } 
 
    public void defineError(int line, int column, String text) { 
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(line, column, text); 
    } 
 
    public void defineError(int linha, int coluna) {    
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(linha, coluna); 
    } 
 
    public void defineError(String text) { 
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(text); 
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= GRAPH colon T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T ::= directed V1 F 
            {
              Object RESULT =null;
		 
        type = "digrafo";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T ::= undirected V2 F 
            {
              Object RESULT =null;
		 
        type = "grafo";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // T ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // V1 ::= V1 vertex ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (Digrafo.existeVertice(id, digrafo)) {
            defineError(idleft, idright, "Vertice duplicado: " + id);
            System.out.println("directed - vertex - if - naoAdicionarVertice " + id);
        } else {
            Digrafo.adicionarVertice(id, digrafo);
            System.out.println("directed - vertex - else - adicionarVertice " + id );
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // V1 ::= V1 vertex IDerrado 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(idleft, idright, "Tentativa de criar vertice com ID errado: " + id);     
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // V1 ::= V1 edge ID arrow ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (!Digrafo.existeVertice(origem, digrafo) || !Digrafo.existeVertice(destino, digrafo)) {
            defineError(origemleft, origemright, "Tentativa de criar aresta com vértice inexistente: " + origem + " -> " + destino);
            System.out.println("directed - edge - if - naoExisteUmvertice");
        } else if (Digrafo.existeAresta(origem, destino, digrafo)) {
            defineError(origemleft, origemright, "Aresta duplicada: " + origem + " -> " + destino);
            System.out.println("directed - edge - else if - arestaDuplicada "+origem + " -> " + destino);
        } else {
            Digrafo.adicionarAresta(origem, destino, digrafo);
            System.out.println("directed - edge - else - adicionarAresta "+origem + " -> " + destino);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // V1 ::= V1 edge IDerrado arrow ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(origemleft, origemright, "ID inválido na origem da aresta: " + origem);
        System.out.println("directed - edge - origem inválida");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // V1 ::= V1 edge ID arrow IDerrado 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(destinoleft, destinoright, "ID inválido no destino da aresta: " + destino);
        System.out.println("directed - edge - destino inválido");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // V1 ::= V1 edge IDerrado arrow IDerrado 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(origemleft, origemright, "IDs inválidos na aresta: " + origem + " -> " + destino);
        System.out.println("directed - edge - origem e destino inválidos");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // V1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // V2 ::= V2 vertex ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (Grafo.existeVertice(id, grafo)) {
            defineError(idleft, idright, "Vertice duplicado: " + id);
            System.out.println("undirected - vertex - if - naoAdicionarVertice " + id);
        } else {
            Grafo.adicionarVertice(id, grafo);
            System.out.println("undirected - vertex - else - adicionarVertice " + id );
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // V2 ::= V2 vertex IDerrado 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(idleft, idright, "Tentativa de criar vertice com ID errado: " + id);     
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // V2 ::= V2 edge ID line ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        if (!Grafo.existeVertice(origem, grafo) || !Grafo.existeVertice(destino, grafo)) {
            defineError(origemleft, origemright, "Tentativa de criar aresta com vértice inexistente: " + origem + " -- " + destino);
            System.out.println("undirected - edge - if - naoExisteUmvertice");
        } else if (Grafo.existeAresta(origem, destino, grafo)) {
            defineError(origemleft, origemright, "Aresta duplicada: " + origem + " -- " + destino);
            System.out.println("undirected - edge - else if - arestaDuplicada "+origem + " -- " + destino);
        } else {
            Grafo.adicionarAresta(origem, destino, grafo);
            System.out.println("undirected - edge - else - adicionarAresta "+origem + " -- " + destino);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // V2 ::= V2 edge IDerrado line ID 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(origemleft, origemright, "ID inválido na origem da aresta: " + origem);
        System.out.println("undirected - edge - origem inválida");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // V2 ::= V2 edge ID line IDerrado 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(destinoleft, destinoright, "ID inválido no destino da aresta: " + destino);
        System.out.println("undirected - edge - destino inválido");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // V2 ::= V2 edge IDerrado line IDerrado 
            {
              Object RESULT =null;
		int origemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int origemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String origem = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(origemleft, origemright, "IDs inválidos na aresta: " + origem + " -- " + destino);
        System.out.println("undirected - edge - origem e destino inválidos");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // V2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // F ::= print adjacency 
            {
              Object RESULT =null;
		 
        deveImprimir = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F ::= error 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        defineError(nleft, nright, "Sintaxe inválida!");
        System.out.println("erro aqui no final");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
